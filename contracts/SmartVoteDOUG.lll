; ------------------------------------------------------------------------------
; DAPP DOUG
; ------------------------------------------------------------------------------
; - keep track of major contracts (DOUG, AccountManager, ElectionManager)
; ------------------------------------------------------------------------------

{
    ; init
    (include "./defs/stdll.def")
    (include "./env.def")

    ; --------------------------------------------------------------------------
    ; macros (UPPER_CASE)
    ; --------------------------------------------------------------------------
    ; macros for contants
    ; NONE
    ; macros for parameters
    (def 'CMD () (calldataload 0x0)
    (def 'CONTRACT_NAME () (calldataload 0x20)
    (def 'CONTRACT_NAME () (calldataload 0x20)

    (llInit "contracts" "none" "none" "none")
    (llAddLink "contracts" "DAPPDOUG" (ADDRESS))

	(return 0 (lll {
        ; body
        ; ----------------------------------------------------------------------
        ; Request Address of contract by its name.
        ; ----------------------------------------------------------------------
        ; Calldata: "checkContract" CONTRACT_NAME
        ; Returns:
        ;     0 - fail
        ;     0xADDRESS - the address associated with the name
        ;-----------------------------------------------------------------------
        (when (= (CMD) "checkContract") {
            [0x0](llGet "DOUG" (name))
            (return 0x0 0x20) ; Return the Address
        })

        ; ----------------------------------------------------------------------
        ; Register a contract. (called in pdx)
        ; ----------------------------------------------------------------------
        ; Calldata: "registerContract" CONTRACT_NAME CONTRACT_ADDRESS
        ; Returns: 0 - fail | 1 - success
        ;-----------------------------------------------------------------------
        (when (= (CMD) "registerContract") {
            (llAddLink "DOUG" (CONTRACT_NAME) (CONTRACT_ADDRESS))

            [0x0]1
            (return 0x0 0x20)
        })
    } 0))
}
