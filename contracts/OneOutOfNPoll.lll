; ------------------------------------------------------------------------------
; OneOfNPoll - the template for one-out-of-N poll contract
; ------------------------------------------------------------------------------
; Descirption to be filled
; ------------------------------------------------------------------------------

(def 'ooonpoll () {

    (include "./env.def")
    (include "./defs/stdkv.def")

    ; --------------------------------------------------------------------------
    ; macros
    ; --------------------------------------------------------------------------
    (def 'cmd () (calldataload 0x0))
    
    ; for setting attributes
    (def 'attributekey (calldataload 0x20))
    (def 'attributeval (calldataload 0x40))

    ; macro for checking edit permission: the caller is in admins and the status
    ; of the contract is 1 - created but not ready
    (def 'epcheck () (&& (= (llGet "admins" (CALLER)) 1)
                         (= (singleGet "status") 1)
                     )
    )

    ; --------------------------------------------------------------------------
    ; variable attributes
    ; --------------------------------------------------------------------------
    (kvInit "vattrs" "none" "none" "none")
    (kvSet "vattrs" "name" 0)
    (kvSet "vattrs" "description" 0)
    (kvSet "vattrs" "opentime" 0)
    (kvSet "vattrs" "closetime" 0)
    ; status:
    ;   1 - created but not ready (the only status in which the contract can be
    ;       edited)
    ;   2 - ready (waiting to be opened)
    ;   3 - on-going (opened but not closed)
    ;   3 - closed
    (kvSet "attributes" "status" 1)
    
    ; --------------------------------------------------------------------------
    ; constant attributes
    ; --------------------------------------------------------------------------
    (kvInit "cattrs" "none" "none" "none"
    (kvSet "vattrs" "creattime" (TIMESTAMP))
    (kvSet "vattrs" "creator" (ORIGIN))
    (kvSet "vattrs" "type" "ooon")

    ; --------------------------------------------------------------------------
    ; admins and voters
    ; --------------------------------------------------------------------------
    ; for recording the addresses of all the contract (account) that can edit
    ; this poll before it is ready (the creator will always be one of them)
    (kvInit "admins" "none" "none" "none")
    (kvSet "admins" (ORIGIN) 1)
    
    ; for recording all the voters
    (kvInit "voters" "none" "none" "none")
    
    ; --------------------------------------------------------------------------
    ; options and stat
    ; --------------------------------------------------------------------------
    (llInit "ops")
    (kvInit "stat")

    (return 0 (lll{
        [[0xcccc]](gass)
        
        ; ----------------------------------------------------------------------
        ; Set variable attributes
        ; ----------------------------------------------------------------------
        ; Calldata: "set" attributekey attributeval
        ; - Legal attributekeys include:
        ;   "name", "description", "opentime", "closetime" and "status"
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "set") {
            (unless (epcheck) (STOP))
            (kvSet (attributekey) (attributeval))
            
            [0x0]1
            (return 0x0 0x20)
        })
        
        (when (&& (= (cmd) "init") (= (singleGet "inited") 0)) {
			(singleSet "description" (hash))
			[0x0](opnum)
			(for ([0x20]1) (<= @0x20 @0x0) [0x20](+ @0x20 1)
				(kvSet "ops" @0x20 0)
			)
			(singleSet "opnum" @0x0)
			(singleSet "opened" (opentime))
			(singleSet "closed" (closetime))
			(singleSet "created" (createtime))
			(singleSet "creator" (crtusrname))
			(singleSet "plname" (plname))
			(singleSet "inited" 1)
			
			[0x0]1
			(return 0x0 0x20)
		}
	)
; The following two blocks are to be removed because we can directly read the
; value by their name in js.
;(when (&& (= (cmd) "getopentime") (= (singleGet "inited") 1)) {
;   [0x0]"opened"
;   (return 0x0 0x20)
;})

;(when (&& (= (cmd) "getclosetime") (= (singleGet "inited") 1)) {
;   [0x0]"closed"
;   (return 0x0 0x20)
;})

		(when (&& (= (cmd) "setopentime") (= (singleGet "inited") 1)) {
			(singleSet "opentime" (newopentime))

			[0x0]1
			(return 0x0 0x20)
		})

		(when (&& (= (cmd) "setclosetime") (= (singleGet "inited") 1)) {
			(singleSet "closetime" (newclosetime))

			[0x0]1
			(return 0x0 0x20)
		})

		(when (&& (= (cmd) "setstatus") (= (singleGet "inited") 1))
			{
				(singleSet "status" (status))

				[0x0]1
				(return 0x0 0x20)
			}
		)

		(when (&& (= (cmd) "vote") (= (singleGet "status") 1)) {
			(kvSet "ops" (opnum) (+ (kvGet "ops" (opnum)) 1))

			[0x0]1
			(return 0x0 0x20)
		})

		(when (&& (= (cmd) "getstat") (= (singleGet "inited") 1)) {
			[0x0](kvGet "ops" (opnum))
			(return 0x0 0x20)
		})

        ;-----------------------------------------------------------------------
        ; Delete the poll
        ; Only the creator of the poll can delete it.
        ;-----------------------------------------------------------------------
        ; Calldata: "deletePoll"
        ; Returns:
        ;-----------------------------------------------------------------------
        (when (= (cmd) "deletePoll") {

            (unless (= (singleGet "creator") (CALLER)) (STOP))

            ; get the address of the PollFactory contract
            ; and save it in memory 0x60
            [0x0]"getContractAddr"
            [0x20]"PollFactory"
            (CALL (gass) DAPPDOUG 0 0x0 0x40 0x60 0x20)
            
            ; delete the record in the PollFactory contract
            [0x0]"deletePoll"
            [0x20](singleGet "pollname")
            (CALL (gass) @0x60 0 0x0 0x40 0x40 0x20)
            
            (unless (= @0x40 1) (STOP))
            (suicide (ADRESS))
        })
        
    } 0)) ; end of return
})
