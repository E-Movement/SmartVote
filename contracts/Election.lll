; ------------------------------------------------------------------------------
; Election
; ------------------------------------------------------------------------------
; - init
; - addLog
; - setSingleAttribute
; - setKvAttribute
; - addLlAttritbute
; - rmLlAttritbute
; - setOptions
; - registerVoter
; - deregisterVoter
; - registerAnonymousVoter
; - deregisterAnonymousVoter
; - addLinkBetweenAccount
; - rmLinkBetweenAccount
; - recordBallot
; - suicideElection
; ------------------------------------------------------------------------------

(def 'election () {
    ; --------------------------------------------------------------------------
    ; References
    ; --------------------------------------------------------------------------
    (include "./env.def")
    (include "./defs/single.def")
    (include "./defs/stdll.def")
    (include "./defs/stdkv.def")

    ; --------------------------------------------------------------------------
    ; Constants
    ; --------------------------------------------------------------------------
    (def 'CREATED (TIMESTAMP))

    ; --------------------------------------------------------------------------
    ; Parameters
    ; --------------------------------------------------------------------------
    (def 'cmd () (calldataload 0x0))

    (def 'crtraddr () (calldataload 0x20)) ;User address of the creator of the election

    (def 'log () (calldataload 0x20))

    (def 'vtraddr () (calldataload 0x20)) ;User address of the voter

    (def 'ansvtraddr () (calldataload 0x40)) ;User address of the anonymous voter

    (def 'optionnum () (calldataload 0x20)) ;Number of options

    (def 'option () (calldataload 0x40)) ;The index of option voted
    (def 'ballot () (calldataload 0x60)) ;New result of the option

    (def 'singleAttributeKey () (calldataload 0x20))
    (def 'singleAttributeValue () (calldataload 0x40))

    (def 'attributeKey () (calldataload 0x20))

    (def 'kvAttributeKey () (calldataload 0x40))
    (def 'kvAttributeValue () (calldataload 0x60))

    (def 'rmLlAttributeKey () (calldataload 0x40))

    (def 'addLlAttributeKey () (calldataload 0x40))
    (def 'addLlAttributeValue () (calldataload 0x60))

    ; --------------------------------------------------------------------------
    ; Variables
    ; --------------------------------------------------------------------------
    (singleInit "electionName" 0)
    (singleInit "hash" 0) ;Hash of description
    (singleInit "owner" 0)
    (singleInit "optionNumber" 0)
    (singleInit "opened" 0)
    (singleInit "closed" 0)
    (singleInit "electionManagerAddress" 0)
    (singleInit "prerequisiteElection" 0) ;Should be allowed to set multiple elections, but single for now
    (singleInit "followupElection" 0) ;Should be allowed to set multiple elections, but single for now
    (kvInit "hasPermList")
    (kvInit "permList")
    (llInit "logs")

    (singleInit "lastVoter")
    (llInit "voterList")
    (llInit "reverseVoterList")

    (singleInit "lastAnonymousVoter")
    (llInit "anonymousVoterList")
    (llInit "reverseAnonymousVoterList")

    (llInit "legalAttributeKeys")
    (llAddLink "legalAttributeKeys" "owner" 1)
    (llAddLink "legalAttributeKeys" "hash" 1)
    (llAddLink "legalAttributeKeys" "opened" 1)
    (llAddLink "legalAttributeKeys" "closed" 1)
    (llAddLink "legalAttributeKeys" "status" 1)
    (llAddLink "legalAttributeKeys" "hasPermList" 1)
    (llAddLink "legalAttributeKeys" "permList" 1)

    (singleInit "status" 0)
    ; status:
    ;   0 - empty
    ;   1 - created (the only status in which the contract can be edited)
    ;   2 - options set
    ;   3 - all attributes except opened and closed are set
    ;   4 - waiting to be opened
    ;   5 - on-going (opened but not closed)
    ;   6 - closed

    (return 0 (lll {
        ; ----------------------------------------------------------------------
        ; Init a new election.
        ; ----------------------------------------------------------------------
        ; Calldata: "init" (CALLER) crtraddr
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (&& (= (cmd) "init") (= (singleGet "status") 0)) {
            (singleSet "owner" (crtraddr))
            (singleSet "electionManagerAddress" (CALLER))
			(singleSet "status" 1)

			[0x0]1
			(return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Add a log entry. (called by the owner)
        ; ----------------------------------------------------------------------
        ; Calldata: "addLog" log
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "addLog") {
            ;TODO Check if the caller is the owner

            ;Add a log entry
            (llAddLink "logs" (TIMESTAMP) log)
            
            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Set a single attribute.
        ; ----------------------------------------------------------------------
        ; Calldata: "setSingleAttribute" singleAttributeKey singleAttributeValue
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "setSingleAttribute") {
            ;TODO Check if the caller has the permission to set

            ;Check if the key is legal
            (unless (= (llGet "legalAttributeKeys" (singleAttributeKey)) 1) (STOP))
            
            ;Execute the setting
            (singleSet (singleAttributeKey) (singleAttributeValue))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Set a kv attribute.
        ; ----------------------------------------------------------------------
        ; Calldata: "setKvAttribute" attributeKey kvAttributeKey kvAttributeValue
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "setKvAttribute") {
            ;TODO Check if the caller has the permission to set

            ;Check if the key is legal
            (unless (= (llGet "legalAttributeKeys" (attributeKey)) 1) (STOP))
            
            ;Execute the setting
            (kvSet (attributeKey) (kvAttributeKey) (kvAttributeValue))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Add a ll attribute.
        ; ----------------------------------------------------------------------
        ; Calldata: "addLlAttribute" attributeKey addLlAttributeKey addLlAttributeValue
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "addLlAttribute") {
            ;TODO Check if the caller has the permission to set

            ;Check if the key is legal
            (unless (= (llGet "legalAttributeKeys" (attributeKey)) 1) (STOP))
            
            ;Check if the key exists
            (unless (= (llGet (attributeKey) (addLlAttributeKey)) 0) (STOP))

            ;Execute the setting
            (llAddLink (attributeKey) (addLlAttributeKey) (addLlAttributeValue))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Remove a ll attribute.
        ; ----------------------------------------------------------------------
        ; Calldata: "rmLlAttribute" attributeKey rmLlAttributeKey
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "rmLlAttribute") {
            ;TODO Check if the caller has the permission to set

            ;Check if the key is legal
            (unless (= (llGet "legalAttributeKeys" (attributeKey)) 1) (STOP))
            
            ;Check if the key exists
            (unless (= (llGet (attributeKey) (addLlAttributeKey)) 1) (STOP))

            ;Execute the setting
            (llRmLink (attributeKey) (rmLlAttributeKey))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Set options.
        ; ----------------------------------------------------------------------
        ; Calldata: "setOptions" optionnum
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "setOptions") {
            ;TODO Check if the caller has the permission to set

            (kvInit "ballots") ;Initialize ballot counting
            (kvInit "votingRecord") ;Initialize voting record

            [0x0](optionnum)
			(for {[0xE0]1} (<= @0xE0 @0x0) [0xE0](+ @0xE0 1)
				(kvSet "ballots" @0xE0 0)
			)

            (when (= (singleGet "status") 1) (singleSet "status" 2))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Register a voter.
        ; ----------------------------------------------------------------------
        ; Calldata: "registerVoter" vtraddr
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "registerVoter") {
            ;TODO Check if the caller has the permission to set

            ;TODO Check if the provided address is a valid user

            ;Check if the voter exists in the list
            (unless (= (llGet "reverseVoterList" (vtraddr)) 0) (STOP))

            ;If there is no user stored
            (when (= (singleGet "lastVoter") 0) {
                (llAddLink "voterList" "HEAD" (vtraddr))
                (llAddLink "reverseVoterList" (vtraddr) "HEAD")
            })

            ;If there is a user stored
            (unless (= (singleGet "lastVoter") 0) {
                (llAddLink "voterList" (singleGet "lastVoter") (vtraddr))
                (llAddLink "reverseVoterList" (vtraddr) (singleGet "lastVoter"))
            })

            (singleSet "lastVoter" (vtraddr))

            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Deregister a voter.
        ; ----------------------------------------------------------------------
        ; Calldata: "deregisterVoter" vtraddr
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "deregisterVoter") {
            ;TODO Check if the caller has the permission to set

            ;TODO Check if the provided address is a valid user

            ;Check if the voter exists in the list
            (when (= (llGet "reverseVoterList" (vtraddr)) 0) (STOP))

            [0x0](CALLER) ;Address of the user
            [0x20](llGet "reverseVoterList" @0x0)

            ;If the user to be removed is tail
            (when (= @0x0 (singleGet "lastVoter")) {

                ;If the user to be removed is head
                (when (= @0x20 "HEAD") {
                    (llRmLink "voterList" "HEAD")
                    (singleSet "lastVoter" 0)
                })

                ;If the user to be removed is not head
                (unless (= @0x20 "HEAD") {
                    (llRmLink "voterList" @0x20)
                    (singleSet "lastVoter" @0x20)
                })
                (llRmLink "reverseVoterList" @0x0)
            })

            ;If the user to be removed is head
            (when (= @0x20 "HEAD") {
                [0x40](llGet "voterList" @0x0)
                (llRmLink "voterList" @0x0)
                (llRmLink "reverseVoterList" @0x0)
                (llAddLink "voterList" "HEAD" @0x40)
                (llAddLink "reverseVoterList" @0x40 "HEAD")
            })

            ;If the user to be removed is not head or tail
            (unless (|| (= @0x0 (singleGet "lastVoter")) (= @0x20 "HEAD")) {
                [0x40](llGet "voterList" @0x0)
                (llRmLink "voterList" @0x0)
                (llRmLink "voterList" @0x20)
                (llRmLink "reverseVoterList" @0x0)
                (llRmLink "reverseVoterList" @0x40)
                (llAddLink "voterList" @0x20 @0x40)
                (llAddLink "reverseVoterList" @0x40 @0x20)
            })

            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Register an anonymous voter.
        ; ----------------------------------------------------------------------
        ; Calldata: "registerAnonymousVoter" vtraddr
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "registerAnonymousVoter") {
            ;TODO Check if the caller has the permission to set

            ;TODO Check if the provided address is a valid user

            ;Check if the voter exists in the list
            (unless (= (llGet "reverseAnonymousVoterList" (vtraddr)) 0) (STOP))

            ;If there is no user stored
            (when (= (singleGet "lastAnonymousVoter") 0) {
                (llAddLink "anonymousVoterList" "HEAD" (vtraddr))
                (llAddLink "reverseAnonymousVoterList" (vtraddr) "HEAD")
            })

            ;If there is a user stored
            (unless (= (singleGet "lastAnonymousVoter") 0) {
                (llAddLink "anonymousVoterList" (singleGet "lastAnonymousVoter") (vtraddr))
                (llAddLink "reverseAnonymousVoterList" (vtraddr) (singleGet "lastAnonymousVoter"))
            })

            (singleSet "lastAnonymousVoter" (vtraddr))

            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Deregister an anonymous voter.
        ; ----------------------------------------------------------------------
        ; Calldata: "deregisterAnonymousVoter" vtraddr
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "deregisterAnonymousVoter") {
            ;TODO Check if the caller has the permission to set

            ;TODO Check if the provided address is a valid user

            ;Check if the voter exists in the list
            (when (= (llGet "reverseAnonymousVoterList" (vtraddr)) 0) (STOP))

            [0x0](CALLER) ;Address of the user
            [0x20](llGet "reverseAnonymousVoterList" @0x0)

            ;If the user to be removed is tail
            (when (= @0x0 (singleGet "lastAnonymousVoter")) {

                ;If the user to be removed is head
                (when (= @0x20 "HEAD") {
                    (llRmLink "anonymousVoterList" "HEAD")
                    (singleSet "lastAnonymousVoter" 0)
                })

                ;If the user to be removed is not head
                (unless (= @0x20 "HEAD") {
                    (llRmLink "anonymousVoterList" @0x20)
                    (singleSet "lastAnonymousVoter" @0x20)
                })
                (llRmLink "reverseAnonymousVoterList" @0x0)
            })

            ;If the user to be removed is head
            (when (= @0x20 "HEAD") {
                [0x40](llGet "anonymousVoterList" @0x0)
                (llRmLink "anonymousVoterList" @0x0)
                (llRmLink "reverseAnonymousVoterList" @0x0)
                (llAddLink "anonymousVoterList" "HEAD" @0x40)
                (llAddLink "reverseAnonymousVoterList" @0x40 "HEAD")
            })

            ;If the user to be removed is not head or tail
            (unless (|| (= @0x0 (singleGet "lastAnonymousVoter")) (= @0x20 "HEAD")) {
                [0x40](llGet "anonymousVoterList" @0x0)
                (llRmLink "anonymousVoterList" @0x0)
                (llRmLink "anonymousVoterList" @0x20)
                (llRmLink "reverseAnonymousVoterList" @0x0)
                (llRmLink "reverseAnonymousVoterList" @0x40)
                (llAddLink "anonymousVoterList" @0x20 @0x40)
                (llAddLink "reverseAnonymousVoterList" @0x40 @0x20)
            })

            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Record a ballot.
        ; ----------------------------------------------------------------------
        ; Calldata: "recordBallot" (CALLER) option ballot
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (&& (= (cmd) "recordBallot")) {
            ;Check if the caller is a registered voter
            (when (= (llGet "reverseAnonymousVoterList" (CALLER)) 0) (STOP))
            
            (kvSet "ballots" (option) (+ (kvGet "ballots" (option)) (ballot)))

            (kvSet "votingRecord" (CALLER) (TIMESTAMP))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ;-----------------------------------------------------------------------
        ; Remove the Election. (called by the owner)
        ;-----------------------------------------------------------------------
        ; Calldata: "suicideElection" (CALLER) (ORIGIN)
        ; Returns: suicide
        ;-----------------------------------------------------------------------
        (when (= (cmd) "suicideElection") {
            ; check if the caller is the owner
            (unless (= (CALLER) owner) (STOP))

            ; remove the record in ElectionManager
            [0x0]"removeElection"
            (CALL (gass) (singleGet "electionManagerAddr") 0 0x0 0x20 0x20 0x20)
            
            (unless (= @0x20 1) (STOP))

            (suicide (ORIGIN))
        })        
    } 0))
})
