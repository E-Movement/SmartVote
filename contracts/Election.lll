; ------------------------------------------------------------------------------
; Election
; ------------------------------------------------------------------------------
; The template for the Election contract
; ------------------------------------------------------------------------------

(def 'election () {

    (include "./env.def")
    (include "./defs/stdkv.def")
    (include "./defs/stll.def")

    ; --------------------------------------------------------------------------
    ; macros (UPPER_CASE)
    ; --------------------------------------------------------------------------
    ; macros for constants
    (def 'CREATED (TIMESTAMP))
    (def 'DAPPDOUG 0xabcdef)

    ; macros for parameters
    (def 'cmd () (calldataload 0x0))

    (def 'log () (calldataload 0x20))

    (def 'crtraddr () (calldataload 0x20)) ;User address of the creator of the election

    (def 'vtraddr () (calldataload 0x20)) ;User address of the voter

    (def 'optionnum () (calldataload 0x20)) ;Number of options

    (def 'option () (calldataload 0x20)) ;The index of option voted
    (def 'newoptionresult () (calldataload 0x40)) ;New result of the option

    (def 'singleAttributeKey () (calldataload 0x20))
    (def 'singleAttributeValue () (calldataload 0x40))

    (def 'attributeKey () (calldataload 0x20))

    (def 'kvAttributeKey () (calldataload 0x40))
    (def 'kvAttributeValue () (calldataload 0x60))

    (def 'rmllAttributeKey () (calldataload 0x40))

    (def 'addllAttributeKey () (calldataload 0x40))
    (def 'addllAttributeValue () (calldataload 0x60))

    ; --------------------------------------------------------------------------
    ; variables (lower_case)
    ; --------------------------------------------------------------------------
    (singleInit "electionName" 0)
    (singleInit "hash" 0) ;Hash of description
    (singleInit "owner" 0)
    (singleInit "optionNumber" 0)
    (singleInit "opened" 0)
	(singleInit "closed" 0)
    (kvInit "hasPermList")
    (kvInit "permList")
    (llInit "logs")
    (llInit "voters")

    (llInit "legalAttributeKeys")
    (llAddLink "legalAttributeKeys" "owner" "owner")
    (llAddLink "legalAttributeKeys" "hash" "hash")
    (llAddLink "legalAttributeKeys" "opened" "opened")
    (llAddLink "legalAttributeKeys" "closed" "closed")
    (llAddLink "legalAttributeKeys" "status" "status")
    (llAddLink "legalAttributeKeys" "hasPermList" "hasPermList")
    (llAddLink "legalAttributeKeys" "permList" "permList")

    (singleInit "status" 0)
    ; status:
    ;   0 - empty
    ;   1 - created (the only status in which the contract can be edited)
    ;   2 - options set
    ;   3 - all attributes except opened and closed are set
    ;   4 - waiting to be opened
    ;   5 - on-going (opened but not closed)
    ;   6 - closed

    (return 0 (lll{
        [[0xcccc]](GASS)

        ; ----------------------------------------------------------------------
        ; Init a new election.
        ; ----------------------------------------------------------------------
        ; Calldata: "init" crtraddr
        ; Returns:
        ;     0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (&& (= (cmd) "init") (= (singleGet "status") 0) {
            (singleSet "owner" (crtraddr))
			(singleSet "status" 1)

			[0x0]1
			(return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Add a log entry. (called by the owner)
        ; ----------------------------------------------------------------------
        ; Calldata: "log" log
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "log" ) {
            ;Check if the caller is the owner

            ;Add a log entry
            (llAddLink "logs" (TIMESTAMP) log)
            
            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Set an single attribute.
        ; ----------------------------------------------------------------------
        ; Calldata: "setSingleAttribute" singleAttributeKey singleAttributeValue
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "setSingleAttribute") {
            ;Check if the caller has the permission to set

            ;Check if the key is legal
            (unless (= (llGet "legalAttributeKeys" (singleAttributeKey)) 1) (STOP))
            
            ;Execute the setting
            (singleSet (singleAttributeKey) (singleAttributeValue))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Set an kv attribute.
        ; ----------------------------------------------------------------------
        ; Calldata: "setKvAttribute" attributeKey kvAttributeKey kvAttributeValue
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "setKvAttribute") {
            ;Check if the caller has the permission to set

            ;Check if the key is legal
            (unless (= (llGet "legalAttributeKeys" (attributeKey)) 1) (STOP))
            
            ;Execute the setting
            (kvSet (attributeKey) (kvAttributeKey) (kvAttributeValue))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Add an ll attribute.
        ; ----------------------------------------------------------------------
        ; Calldata: "addllAttribute" attributeKey addllAttributeKey addllAttributeValue
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "addllAttribute") {
            ;Check if the caller has the permission to set

            ;Check if the key is legal
            (unless (= (llGet "legalAttributeKeys" (attributeKey)) 1) (STOP))
            
            ;Check if the key exists
            (unless (= (llGet (attributeKey) (addllAttributeKey)) 0) (STOP))

            ;Execute the setting
            (llAddLink (attributeKey) (addllAttributeKey) (addllAttributeValue))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Remove an ll attribute.
        ; ----------------------------------------------------------------------
        ; Calldata: "rmllAttribute" attributeKey rmllAttributeKey
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "rmllAttribute") {
            ;Check if the caller has the permission to set

            ;Check if the key is legal
            (unless (= (llGet "legalAttributeKeys" (attributeKey)) 1) (STOP))
            
            ;Check if the key exists
            (unless (= (llGet (attributeKey) (addllAttributeKey)) 1) (STOP))

            ;Execute the setting
            (llRmLink (attributeKey) (rmllAttributeKey))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Set options.
        ; ----------------------------------------------------------------------
        ; Calldata: "setOptions" optionnum
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "setOptions") {
            ;Check if the caller has the permission to set

            (kvInit "ballots") ;Initialize ballot counting
            (kvInit "votingRecord") ;Initialize voting record

            [0x0](optionnum)
			(for {[0xE0]1} (<= @0xE0 @0x0) [0xE0](+ @0xE0 1)
				(kvSet "ballots" @0xE0 0)
			)

            (when (= (singleGet "status") 1) (singleSet "status" 2))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Register a voter.
        ; ----------------------------------------------------------------------
        ; Calldata: "registerVoter" vtraddr
        ; Returns: 0 - fail | 1 -success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "registerVoter") {
            ;Check if the caller has the permission to set

            ; TODO check if the provided address is a valid user

            ;Check if the voter exists in the list
            (unless (= (llGet "voters" (vtraddr)) 0) (STOP))

            (llAddLink "voters" (vtraddr) 1)

            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Deregister a voter.
        ; ----------------------------------------------------------------------
        ; Calldata: "deregisterVoter" vtraddr
        ; Returns: 0 - fail | 1 -success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "deregisterVoter") {
            ;Check if the caller has the permission to set

            ; TODO check if the provided address is a valid user

            ;Check if the voter exists in the list
            (unless (= (llGet "voters" (vtraddr)) 1) (STOP))

            (llRmLink "voters" (vtraddr))

            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Record a ballot. (called by a voter)
        ; ----------------------------------------------------------------------
        ; Calldata: "recordBallot" BALLOT
        ; Returns: 0 - fail | 1 -success
        ; ----------------------------------------------------------------------
        (when (&& (= (cmd) "recordBallot")) {
            ;Check if the caller is a registered voter
            (unless (= (llGet "voters" (CALLER)) 1) (STOP))
            
            (kvSet "ballots" (option) (newoptionresult))

            (kvSet "votingRecord" (CALLER) (TIMESTAMP))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ;-----------------------------------------------------------------------
        ; Check the owner. (called by the owner) Necessary?????????
        ;-----------------------------------------------------------------------
        ; Calldata: "checkOwner"
        ; Returns:
        ;     0 - the caller is not its owner
        ;     1 - the caller is its owner
        ;-----------------------------------------------------------------------
        (when (= (cmd) "checkOwner") {
            (unless (= (CALLER owner) (STOP))
            
            [0x0]1
            (return 0x0 0x20)
        })

        ;-----------------------------------------------------------------------
        ; Remove the Election. (called by the owner)
        ;-----------------------------------------------------------------------
        ; Calldata: "removeElection"
        ; Returns:
        ;-----------------------------------------------------------------------
        (when (= (cmd) "removeElection") {
            ; check if the call is the owner
            (unless (= (CALLER) owner) (STOP))

            ;Get the address of electionManager
            [0x0]"checkName"
            [0x20]"electionManager"
            (CALL (gass) DAPPDOUG 0 0x0 0x40 0x40 0x20)

            ; remove the record in ElectionManager
            [0x0]"removeElection"
            (CALL (gass) @0x40 0 0x0 0x20 0x20 0x20)
            
            (unless (= @0x20 1) (STOP))

            (suicide (ORIGIN))
        })        
    } 0))
})
