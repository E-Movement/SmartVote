; ------------------------------------------------------------------------------
; OneOfNPoll - the template for one-of-many poll contract
; ------------------------------------------------------------------------------
; Descirption to be filled
; ------------------------------------------------------------------------------

(def 'yonpoll () {

    (include "./env.def")
    (include "./defs/stdll.def")
    (include "./defs/single.def")

    ; --------------------------------------------------------------------------
    ; macros
    ; --------------------------------------------------------------------------
    (def 'cmd () (calldataload 0x0))
    
    ; for set
    (def 'attributekey (calldataload 0x20))
    (def 'attributeval (calldataload 0x40))
    
    ; for voting
    (def 'choice (calldataload 0x20))
    
    (def 'status () (calldataload 0x20))
    
    (def 'opentime () (calldataload 0x20))
    
    (def 'closetime () (calldataload 0x20))
    
    (def 'name () (calldataload 0x20))
    
    ; macro for checking edit permission: the caller is in admins and the status
    ; of the contract is 1 - created but not opened
    (def 'EPcheck () (&& (= (llGet "admins" (CALLER)) 1)
                         (= (singleGet "status") 1)
                     )
    )

    ; --------------------------------------------------------------------------
    ; basic info
    ; --------------------------------------------------------------------------
    (kvInit "attributes" "none" "none" "none")
    ; Do we need id?????????????????????????????????????????????????????????????
    (kvSet "attributes" "name" 0)
    (kvSet "attributes" "description" 0)
    (kvSet "attributes" "opentime" 0)
    (kvSet "attributes" "closetime" 0)
    (kvSet "attributes" "creattime" (TIMESTAMP))
    (kvSet "attributes" "creator" (ORIGIN))
    ; status:
    ;   1 - created but not opened (the only status in which the contract can be
    ;       edited)
    ;   2 - on-going
    ;   3 - closed
    (kvSet "attributes" "status" 1)

    ; --------------------------------------------------------------------------
    ; others
    ; --------------------------------------------------------------------------
    ; the array of 2 to store the votes
    (kvInit "stat" "none" "none" "none")
    (kvSet "stat" "yes" 0)
    (kvSet "stat" "no" 0)
    
    ; ll to record all the contract that can edit this poll before it is
    ; opened (the creator will always be one of them)
    (llInit "admins" "none" "none" "none")
    (llAddLink "admins" (ORIGIN) 1)
    
    ; ll to record all the voters
    (llInit "voters" "none" "none" "none")

    (return 0 (lll{
        [[0xcccc]](gass)

        ; ----------------------------------------------------------------------
        ; Set attributes
        ; ----------------------------------------------------------------------
        ; Calldata: "set" attributekey attributeval
        ; - Legal attribute_keys include:
        ;   "name", "description", "opentime", "closetime", "creattime",
        ;   "creator" (the last two cannot be changed)
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "set"))) {
            (unless (EPcheck) (STOP))
            (kvSet (attributekey) (attributeval))
            
            [0x0]1
            (return 0x0 0x20)
        })

????????????????????????????????????????????????????????????????????????????????
        ; ----------------------------------------------------------------------
        ; Open the poll
        ; ----------------------------------------------------------------------
        ; Calldata: "open"
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (&& (= (cmd) "setstatus") (= (singleGet "inited") 1)) {
            (kvSet "attributes" "status" 2)

            [0x0]1
            (return 0x0 0x20)
        })
????????????????????????????????????????????????????????????????????????????????

        ; ----------------------------------------------------------------------
        ; Update a vote.
        ; ----------------------------------------------------------------------
        ; Calldata: "vote" "yes"/"no"
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "vote")) {
            (unless (= (llGet "voters" (CALLER)) 1) (STOP))
            (when (= (choice) "yes") {
                [0x0] (kvGet "stat" "yes")
                (kvSet "stat" "yes" (@0x0 + 1))
            })
            (when (= (choice) "no") {
                [0x0] (kvGet "stat" "no")
                (kvSet "stat" "no" (@0x0 + 1))
            })

            [0x0]1
            (return 0x0 0x20)
        })

        ;-----------------------------------------------------------------------
        ; Delete the poll
        ; Only the creator of the poll can delete it.
        ;-----------------------------------------------------------------------
        ; Calldata: "deletePoll"
        ; Returns:
        ;-----------------------------------------------------------------------
        (when (= (cmd) "deletepoll") {
            (unless (EPcheck) (STOP))

            ; get the address of the PollFactory contract
            ; and save it in memory 0x60
            [0x0]"getContractAddr"
            [0x20]"PollFactory"
            (CALL (gass) DAPPDOUG 0 0x0 0x40 0x60 0x20)
            
            ; delete the record in the PollFactory contract
            [0x0]"deletePoll"
            [0x20](singleGet "pollname")
            (CALL (gass) @0x60 0 0x0 0x40 0x40 0x20)
            
            (unless (= @0x40 1) (STOP))
            (suicide (ORIGIN))    ; ???????????????????????????????????????????
        })
        
    } 0)) ; end of return
})
