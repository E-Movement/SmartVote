{
	(include "./Poll.lll")
	(include "./defs/stdkv.def")
	(include "./defs/stdll.def")
	(include "./env.def")

	(kvInit "polls")
	(llInit "plnames")

	(def 'plname () (calldataload 0x20)) ;The name of the poll

	(def 'DAPPDOUG 0xdaffe)
	(return 0 (lll {

		(when (= (calldataload 0x0) "create")
			{

				(unless (&& (= (llGet "plnames" (plname)) 0) (= (kvGet "polls" (ORIGIN)) 0)) (STOP)) ;Poll name taken/Poll has an account

				(llAddLink "plnames" (plname) (ORIGIN))

				;Create the code
				[0x0](create 0 0 (lll {
						
					(poll)

				} 0))

				[[@0x0]]1 ;note that this contract was made here

				(kvSet "polls" (ORIGIN) @0x0)

				[0x20]"setperm"
				[0x40]"pollaccount"
				[0x60]@0x0
				[0x80]1
				(CALL (gass) DAPPDOUG 0 0x20 0x80 0xA0 0x20)

				[0xA0]"init"
				[0xC0](plname)
				(CALL (gass) @0x0 0 0xA0 0x40 0xE0 0x20)

				(return 0x0 0x20) ;Return address
			}
		)

		(when (= (calldataload 0x0) "check")
			{
				[0x0]@@(calldataload 0x20)
				(return 0x0 0x20)
			}
		)

		(when (= (calldataload 0x0) "deleteapoll")
			{
				[0x0](calldataload 0x20) ;The poll name
				[0x20](llGet "plnames" @0x0) ;The poll address
				[0x40](kvGet "polls" @0x20) ;The contract address

				(unless (= (CALLER) @0x40) (STOP))

				(llRmLink "plnames" @0x0)
				(kvSet "polls" @0x20 0)

				[0x0]1
				(return 0x0 0x20)
			}
		)

	} 0))
}
