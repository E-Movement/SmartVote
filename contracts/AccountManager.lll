; ------------------------------------------------------------------------------
; AccountManager
; ------------------------------------------------------------------------------
; - createAdmin
; - createVoter
; - createAnonymousVoter
; - addToBlacklist
; - deleteFromBlacklist
; - checkBlacklist
; - destructAdmin
; - destructVoter
; - destructAnonymousVoter
; ------------------------------------------------------------------------------

{
    ; --------------------------------------------------------------------------
    ; References
    ; --------------------------------------------------------------------------
    (include "./User.lll")
    (include "./defs/single.def")
    (include "./defs/stdll.def")
    (include "./defs/stdkv.def")
    (include "./env.def")
    
    ; --------------------------------------------------------------------------
    ; Constants
    ; --------------------------------------------------------------------------
    (def 'DAPPDOUG 0xdaffe)

    ; --------------------------------------------------------------------------
    ; Parameters
    ; --------------------------------------------------------------------------
    (def 'cmd () (calldataload 0x0))

    (def 'usrname () (calldataload 0x20))

    (def 'usraddr () (calldataload 0x20))

    ; --------------------------------------------------------------------------
    ; Variables
    ; --------------------------------------------------------------------------
    (singleInit "lastAdmin")
    (llInit "adminAddressToAdminName")
    (llInit "adminList")
    (llInit "reverseAdminList")

    (singleInit "lastVoter")
    (llInit "voterAddressToVoterName")
    (llInit "voterList")
    (llInit "reverseVoterList")

    (singleInit "lastAnonymousVoter")
    (llInit "anonymousVoterAddressToAnonymousVoterName")
    (llInit "anonymousVoterList")
    (llInit "reverseAnonymousVoterList")

    (llInit "blacklist")

    (return 0 (lll {
        ; ----------------------------------------------------------------------
        ; Create a contract for a new administrator.
        ; ----------------------------------------------------------------------
        ; Calldata: "createAdmin" usrname
        ; Returns:  0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "createAdmin") {
            [0xC0](usrname) ;Store the username in case of conflict

            ;Create the contract
            [0x0](create 0 0 (lll {
                      (administrator)
                  } 0))
            [[@0x0]]1


            ;If there is no user stored
            (when (= (singleGet "lastAdmin") 0) {
                (llAddLink "adminList" "HEAD" @0x0)
                (llAddLink "reverseAdminList" @0x0 "HEAD")
            })

            ;If there is a user stored
            (unless (= (singleGet "lastAdmin") 0) {
                (llAddLink (singleGet "adminList" "lastAdmin") @0x0)
                (llAddLink "reverseAdminList" @0x0 (singleGet "lastAdmin"))
            })

            (singleSet "lastAdmin" @0x0)
            (llAddLink "adminAddressToAdminName" @0x0 @0xC0)
            
            [0x20]"setPerm"
            [0x40]"userAccount"
            [0x60]@0x0
            [0x80]1
            (CALL (gass) DAPPDOUG 0 0x20 0x80 0x20 0x20)

            [0x20]"init"
            (CALL (gass) @0x0 0 0x20 0x20 0x20 0x20)

            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Create a contract for a new voter.
        ; ----------------------------------------------------------------------
        ; Calldata: "createVoter" usrname
        ; Returns:  0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "createVoter") {
            [0xC0](usrname) ;Store the username in case of conflict

            ;Create the contract
            [0x0](create 0 0 (lll {
                      (voter)
                  } 0))
            [[@0x0]]1


            ;If there is no user stored
            (when (= (singleGet "lastVoter") 0) {
                (llAddLink "voterList" "HEAD" @0x0)
                (llAddLink "reverseVoterList" @0x0 "HEAD")
            })

            ;If there is a user stored
            (unless (= (singleGet "lastVoter") 0) {
                (llAddLink (singleGet "voterList" "lastVoter") @0x0)
                (llAddLink "reverseVoterList" @0x0 (singleGet "lastVoter"))
            })

            (singleSet "lastVoter" @0x0)
            (llAddLink "voterAddressToVoterName" @0x0 @0xC0)
            
            [0x20]"setPerm"
            [0x40]"userAccount"
            [0x60]@0x0
            [0x80]1
            (CALL (gass) DAPPDOUG 0 0x20 0x80 0x20 0x20)

            [0x20]"init"
            (CALL (gass) @0x0 0 0x20 0x20 0x20 0x20)

            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Create a contract for a new anonymous voter.
        ; ----------------------------------------------------------------------
        ; Calldata: "createAnonymousVoter" usrname
        ; Returns:  0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "createAnonymousVoter") {
            [0xC0](usrname) ;Store the username in case of conflict

            ;Create the contract
            [0x0](create 0 0 (lll {
                      (voter)
                  } 0))
            [[@0x0]]1


            ;If there is no user stored
            (when (= (singleGet "lastAnonymousVoter") 0) {
                (llAddLink "anonymousVoterList" "HEAD" @0x0)
                (llAddLink "reverseAnonymousVoterList" @0x0 "HEAD")
            })

            ;If there is a user stored
            (unless (= (singleGet "lastAnonymousVoter") 0) {
                (llAddLink (singleGet "anonymousVoterList" "lastAnonymousVoter") @0x0)
                (llAddLink "reverseAnonymousVoterList" @0x0 (singleGet "lastAnonymousVoter"))
            })

            (singleSet "lastAnonymousVoter" @0x0)
            (llAddLink "anonymousVoterAddressToAnonymousVoterName" @0x0 @0xC0)
            
            [0x20]"setPerm"
            [0x40]"userAccount"
            [0x60]@0x0
            [0x80]1
            (CALL (gass) DAPPDOUG 0 0x20 0x80 0x20 0x20)

            [0x20]"init"
            (CALL (gass) @0x0 0 0x20 0x20 0x20 0x20)

            (return 0x0 0x20)
        })


        ; ----------------------------------------------------------------------
        ; Add a user to blacklist.
        ; ----------------------------------------------------------------------
        ; Calldata: "addToBlacklist" usraddr
        ; Returns: 0 - fail | 1 - success
        ; ---------------------------------------------------------------------- 
        (when (= (cmd) "addToBlacklist") {
            ;Check if the user is already in blacklist
            (unless (= (llGet "blacklist" (usraddr)) 0) (STOP))

            ;Add the user to blacklist
            (llAddLink "blacklist" (usraddr) 1)

            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Delete a user from blacklist.
        ; ----------------------------------------------------------------------
        ; Calldata: "deleteFromBlacklist" usraddr
        ; Returns: 0 - fail | 1 - success
        ; ---------------------------------------------------------------------- 
        (when (= (cmd) "deleteFromBlacklist") {
            ;Check if the user is in blacklist
            (when (= (llGet "blacklist" (usraddr)) 0) (STOP))

            ;Delete the user from blacklist
            (llRmLink "blacklist" (usraddr))

            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Check if a user is in blacklist.
        ; ----------------------------------------------------------------------
        ; Calldata: "checkBlacklist" usraddr
        ; Returns: 
        ;       0 - user not in blacklist | 1 - user in blacklist
        ; ---------------------------------------------------------------------- 
        (when (= (cmd) "checkBlacklist") {
            (when (= (llGet "blacklist" (usraddr)) 0) [0x0]0)
            (unless (= (llGet "blacklist" (usraddr)) 0) [0x0]1)
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Destruct an administrator.
        ; ----------------------------------------------------------------------
        ; Calldata: "destructAdmin"
        ; Returns:  0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "destructAdmin") {
            [0x0](CALLER) ;Address of the user
            [0x20](llGet "reverseAdminList" @0x0)

            ;If the user to be removed is tail
            (when (= @0x0 (singleGet "lastAdmin")) {

                ;If the user to be removed is head
                (when (= @0x20 "HEAD") {
                    (llRmLink "adminList" "HEAD")
                    (singleSet "lastAdmin" 0)
                })

                ;If the user to be removed is not head
                (unless (= @0x20 "HEAD") {
                    (llRmLink "adminList" @0x20)
                    (singleSet "lastAdmin" @0x20)
                })
                (llRmLink "reverseAdminList" @0x0)
            })

            ;If the user to be removed is head
            (when (= @0x20 "HEAD") {
                [0x40](llGet "adminList" @0x0)
                (llRmLink "adminList" @0x0)
                (llRmLink "reverseAdminList" @0x0)
                (llAddLink "adminList" "HEAD" @0x40)
                (llAddLink "reverseAdminList" @0x40 "HEAD")
            })

            ;If the user to be removed is not head or tail
            (unless (|| (= @0x0 (singleGet "lastAdmin")) (= @0x20 "HEAD")) {
                [0x40](llGet "adminList" @0x0)
                (llRmLink "adminList" @0x0)
                (llRmLink "adminList" @0x20)
                (llRmLink "reverseAdminList" @0x0)
                (llRmLink "reverseAdminList" @0x40)
                (llAddLink "adminList" @0x20 @0x40)
                (llAddLink "reverseAdminList" @0x40 @0x20)
            })

            (llRmLink "adminAddressToAdminName" @0x0)

            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Destruct a voter.
        ; ----------------------------------------------------------------------
        ; Calldata: "destructVoter"
        ; Returns:  0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "destructVoter") {
            [0x0](CALLER) ;Address of the user
            [0x20](llGet "reverseVoterList" @0x0)

            ;If the user to be removed is tail
            (when (= @0x0 (singleGet "lastVoter")) {

                ;If the user to be removed is head
                (when (= @0x20 "HEAD") {
                    (llRmLink "voterList" "HEAD")
                    (singleSet "lastVoter" 0)
                })

                ;If the user to be removed is not head
                (unless (= @0x20 "HEAD") {
                    (llRmLink "voterList" @0x20)
                    (singleSet "lastVoter" @0x20)
                })
                (llRmLink "reverseVoterList" @0x0)
            })

            ;If the user to be removed is head
            (when (= @0x20 "HEAD") {
                [0x40](llGet "voterList" @0x0)
                (llRmLink "voterList" @0x0)
                (llRmLink "reverseVoterList" @0x0)
                (llAddLink "voterList" "HEAD" @0x40)
                (llAddLink "reverseVoterList" @0x40 "HEAD")
            })

            ;If the user to be removed is not head or tail
            (unless (|| (= @0x0 (singleGet "lastVoter")) (= @0x20 "HEAD")) {
                [0x40](llGet "voterList" @0x0)
                (llRmLink "voterList" @0x0)
                (llRmLink "voterList" @0x20)
                (llRmLink "reverseVoterList" @0x0)
                (llRmLink "reverseVoterList" @0x40)
                (llAddLink "voterList" @0x20 @0x40)
                (llAddLink "reverseVoterList" @0x40 @0x20)
            })

            (llRmLink "voterAddressToVoterName" @0x0)

            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Destruct an anonymous voter.
        ; ----------------------------------------------------------------------
        ; Calldata: "destructAnonymousVoter"
        ; Returns:  0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "destructAnonymousVoter") {
            [0x0](CALLER) ;Address of the user
            [0x20](llGet "reverseAnonymousVoterList" @0x0)

            ;If the user to be removed is tail
            (when (= @0x0 (singleGet "lastAnonymousVoter")) {

                ;If the user to be removed is head
                (when (= @0x20 "HEAD") {
                    (llRmLink "anonymousVoterList" "HEAD")
                    (singleSet "lastAnonymousVoter" 0)
                })

                ;If the user to be removed is not head
                (unless (= @0x20 "HEAD") {
                    (llRmLink "anonymousVoterList" @0x20)
                    (singleSet "lastAnonymousVoter" @0x20)
                })
                (llRmLink "reverseAnonymousVoterList" @0x0)
            })

            ;If the user to be removed is head
            (when (= @0x20 "HEAD") {
                [0x40](llGet "anonymousVoterList" @0x0)
                (llRmLink "anonymousVoterList" @0x0)
                (llRmLink "reverseAnonymousVoterList" @0x0)
                (llAddLink "anonymousVoterList" "HEAD" @0x40)
                (llAddLink "reverseAnonymousVoterList" @0x40 "HEAD")
            })

            ;If the user to be removed is not head or tail
            (unless (|| (= @0x0 (singleGet "lastAnonymousVoter")) (= @0x20 "HEAD")) {
                [0x40](llGet "anonymousVoterList" @0x0)
                (llRmLink "anonymousVoterList" @0x0)
                (llRmLink "anonymousVoterList" @0x20)
                (llRmLink "reverseAnonymousVoterList" @0x0)
                (llRmLink "reverseAnonymousVoterList" @0x40)
                (llAddLink "anonymousVoterList" @0x20 @0x40)
                (llAddLink "reverseAnonymousVoterList" @0x40 @0x20)
            })

            (llRmLink "anonymousVoterAddressToAnonymousVoterName" @0x0)

            [0x0]1
            (return 0x0 0x20)
        })
    } 0))
}
