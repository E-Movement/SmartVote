; ------------------------------------------------------------------------------
; AccountManager
; ------------------------------------------------------------------------------
; - create users
; - create organizers
; - keep track of all organizers
; - keep track of all users
; ------------------------------------------------------------------------------

{
    ; init
    (include "./env.def")
    (include "./defs/stll.def")
    
    ; --------------------------------------------------------------------------
    ; macros (UPPER_CASE)
    ; --------------------------------------------------------------------------
    ; macros for constants
    ; NONE
    ;
    ; macros for parameters
    (def 'CMD () (calldataload 0x0))
    (def 'NAME () (calldataload 0x20))

    ; --------------------------------------------------------------------------
    ; variables (lower_case)
    ; --------------------------------------------------------------------------
    (llInit "organizers" "none" "none" "none")
    (llInit "users" "none" "none" "none")

    (return 0 (lll {
        ; ----------------------------------------------------------------------
        ; Create an organizer from the Organizer template
        ; ----------------------------------------------------------------------
        ; Calldata: "createOrganizer"
        ; Returns:
        ;     0 - fail
        ;     0xADDRESS - the address of the newly created contract
        ; ----------------------------------------------------------------------
        (when (= (CMD) "createOrganizer") {
            ; create the contract
            [0x0](create 0 0 (lll {
                      (organizer)
                  } 0))
            [[@0x0]]1

            (llAddLink "organizers" (ORIGIN) @0x0)

            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Create a user from the User template
        ; ----------------------------------------------------------------------
        ; Calldata: "createUser"
        ; Returns:
        ;     0 - fail
        ;     0xADDRESS - the address of the newly created contract
        ; ----------------------------------------------------------------------
        (when (= (CMD) "createUser") {
            ; create the contract
            [0x0](create 0 0 (lll {
                     (user)
                 } 0))
            [[@0x0]]1
            
            (llAddLink "users" (ORIGIN) @0x0)

            (return 0x0 0x20)
        })
        
        ; ----------------------------------------------------------------------
        ; Check if a name is an organizer.
        ; ----------------------------------------------------------------------
        ; Calldata: "checkOrganizer" NAME
        ; Returns:
        ;     0 - not so
        ;     0xADDRESS - the address of the according organizer contract
        ; ---------------------------------------------------------------------- 
        (when (= (CMD) "checkOrganizer") {
            [0x0](llGet "organizers" (ADDRESS))
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Check if a name is a user.
        ; ----------------------------------------------------------------------
        ; Calldata: "checkUser" NAME
        ; Returns:
        ;     0 - not so
        ;     0xADDRESS - the address of the according user contract
        ; ---------------------------------------------------------------------- 
        (when (= (CMD) "checkUser") {
            [0x0](llGet "users" (ADDRESS))
            (return 0x0 0x20)
        })
    })
}