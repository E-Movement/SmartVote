; ------------------------------------------------------------------------------
; AccountManager
; ------------------------------------------------------------------------------
; - create users
; - create organizers
; - keep track of all organizers
; - keep track of all users
; - entrance to the voter-election registration
; ------------------------------------------------------------------------------

{
    ; init
    (include "./env.def")
    (include "./defs/stll.def")
    
    ; --------------------------------------------------------------------------
    ; macros (UPPER_CASE)
    ; --------------------------------------------------------------------------
    ; macros for constants
    (def 'DOUG 0xabcdef)
    (def 'ELECTION_MANAGER 0xabcdef)

    ; macros for parameters
    (def 'CMD () (calldataload 0x0))
    (def 'ORGANIZER_NAME () (calldataload 0x20))
    (def 'USER_NAME () (calldataload 0x20))
    (def 'ELECTION_ADDRESS () (calldataload 0x40))

    ; --------------------------------------------------------------------------
    ; variables (lower_case)
    ; --------------------------------------------------------------------------
    (llInit "organizers" "none" "none" "none")
    (llInit "users" "none" "none" "none")

    (return 0 (lll {
        ; ----------------------------------------------------------------------
        ; Create an organizer from the Organizer template
        ; ----------------------------------------------------------------------
        ; Calldata: "createOrganizer"
        ; Returns:
        ;     0 - fail
        ;     0xADDRESS - the address of the newly created contract
        ; ----------------------------------------------------------------------
        (when (= (CMD) "createOrganizer") {
            ; create the contract
            [0x0](create 0 0 (lll {
                      (organizer)
                  } 0))
            [[@0x0]]1

            (llAddLink "organizers" (ORIGIN) @0x0)

            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Create a user from the User template
        ; ----------------------------------------------------------------------
        ; Calldata: "createUser"
        ; Returns:
        ;     0 - fail
        ;     0xADDRESS - the address of the newly created contract
        ; ----------------------------------------------------------------------
        (when (= (CMD) "createUser") {
            ; create the contract
            [0x0](create 0 0 (lll {
                     (user)
                 } 0))
            [[@0x0]]1
            
            (llAddLink "users" (ORIGIN) @0x0)

            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Check if a name is an organizer.
        ; ----------------------------------------------------------------------
        ; Calldata: "checkOrganizer" ORGANIZER_NAME
        ; Returns:
        ;     0 - not so
        ;     0xADDRESS - the address of the according organizer contract
        ; ---------------------------------------------------------------------- 
        (when (= (CMD) "checkOrganizer") {
            [0x0](llGet "organizers" (ORGANIZER_NAME))
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Check if a name is a user.
        ; ----------------------------------------------------------------------
        ; Calldata: "checkUser" USER_NAME
        ; Returns:
        ;     0 - not so
        ;     0xADDRESS - the address of the according user contract
        ; ---------------------------------------------------------------------- 
        (when (= (CMD) "checkUser") {
            [0x0](llGet "users" (USER_NAME))
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Register a voter. (called by an Organizer)
        ; ----------------------------------------------------------------------
        ; Calldata: "registerVoter" USER_NAME ELECTION_ADDRESS
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (CMD) "registerVoter") {
            ; check if the caller is an Organizer
            (when (= 0 (llGet "organizers" (CALLER))) (STOP))

            ; check if the voter is a valid user
            (when (= 0 (llGet "users" (USER_NAME))) (STOP))
            
            ; check if the election is a valid election
            [0x0]"checkElection"
            [0x20](ELECTION_ADDRESS)
            (CALL (GASS) ELECTION_MANAGER 0 0x0 0x40 0x40 0x20)
            (when (= 0 @0x40) (STOP))

            ; check if the caller is the election's organizer
            [0x0]"checkOrganizer"
            (CALL (GASS) (ELECTION_ADDRESS) 0 0x0 0x20 0x20 0x20)
            (when (= 0 @0x20) (STOP))

            ; register the voter in the election contract
            [0x0]"registerVoter"
            [0x20](USER_NAME)
            (CALL (GASS) (ELECTION_ADDRESS) 0 0x0 0x40 0x40 0x20)
            (when (= 0 @0x40) (STOP))
            
            ; register the election in the voter contract
            [0x0]"registerElection"
            [0x20](ELECTION_ADDRESS)
            (CALL (GASS) (llGet "user" (USER_NAME)) 0 0x0 0x40 0x40 0x20)
            (when (= 0 @0x40) (STOP))
            
            [0x0]1
            (return 0x0 0x20)
        })
    })
}