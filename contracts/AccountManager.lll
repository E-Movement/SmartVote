; ------------------------------------------------------------------------------
; AccountManager
; ------------------------------------------------------------------------------
; - createUser
; - addToBlacklist
; - deleteFromBlacklist
; - checkBlacklist
; - destructUser
; ------------------------------------------------------------------------------

{
    ; --------------------------------------------------------------------------
    ; References
    ; --------------------------------------------------------------------------
    (include "./User.lll")
    (include "./defs/single.def")
    (include "./defs/stdll.def")
    (include "./defs/stdkv.def")
    (include "./env.def")
    
    ; --------------------------------------------------------------------------
    ; Constants
    ; --------------------------------------------------------------------------
    (def 'DAPPDOUG 0xdaffe)

    ; --------------------------------------------------------------------------
    ; Parameters
    ; --------------------------------------------------------------------------
    (def 'cmd () (calldataload 0x0))

    (def 'usrname () (calldataload 0x20))

    (def 'usraddr () (calldataload 0x20))

    ; --------------------------------------------------------------------------
    ; Variables
    ; --------------------------------------------------------------------------
    (singleInit "lastUser")
    (llInit "userAddressToUserName")
    (llInit "userList")
    (llInit "reverseUserList")
    (llInit "blacklist")

    (return 0 (lll {
        ; ----------------------------------------------------------------------
        ; Create a contract for a new user.
        ; ----------------------------------------------------------------------
        ; Calldata: "createUser" usrname
        ; Returns:  0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "createUser") {
            [0xC0](usrname) ;Store the username in case of conflict

            ;Create the contract
            [0x0](create 0 0 (lll {
                      (user)
                  } 0))
            [[@0x0]]1


            ;If there is no user stored
            (when (= (singleGet "lastUser") 0) {
                (llAddLink "userList" "HEAD" @0x0)
                (llAddLink "reverseUserList" @0x0 "HEAD")
            })

            ;If there is a user stored
            (unless (= (singleGet "lastUser") 0) {
                (llAddLink (singleGet "userList" "lastUser") @0x0)
                (llAddLink "reverseUserList" @0x0 (singleGet "lastUser"))
            })

            (singleSet "lastUser" @0x0)
            (llAddLink "userAddressToUserName" @0x0 @0xC0)
            
            [0x20]"setPerm"
            [0x40]"userAccount"
            [0x60]@0x0
            [0x80]1
            (CALL (gass) DAPPDOUG 0 0x20 0x80 0x20 0x20)

            [0x20]"init"
            (CALL (gass) @0x0 0 0x20 0x20 0x20 0x20)

            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Add a user to blacklist.
        ; ----------------------------------------------------------------------
        ; Calldata: "addToBlacklist" usraddr
        ; Returns: 0 - fail | 1 - success
        ; ---------------------------------------------------------------------- 
        (when (= (cmd) "addToBlacklist") {
            ;Check if the user is already in blacklist
            (unless (= (llGet "blacklist" (usraddr)) 0) (STOP))

            ;Add the user to blacklist
            (llAddLink "blacklist" (usraddr) 1)

            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Delete a user from blacklist.
        ; ----------------------------------------------------------------------
        ; Calldata: "deleteFromBlacklist" usraddr
        ; Returns: 0 - fail | 1 - success
        ; ---------------------------------------------------------------------- 
        (when (= (cmd) "deleteFromBlacklist") {
            ;Check if the user is in blacklist
            (when (= (llGet "blacklist" (usraddr)) 0) (STOP))

            ;Delete the user from blacklist
            (llRmLink "blacklist" (usraddr))

            [0x0]1
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Check if a user is in blacklist.
        ; ----------------------------------------------------------------------
        ; Calldata: "checkBlacklist" usraddr
        ; Returns: 
        ;       0 - user not in blacklist | 1 - user in blacklist
        ; ---------------------------------------------------------------------- 
        (when (= (cmd) "checkBlacklist") {
            (when (= (llGet "blacklist" (usraddr)) 0) [0x0]0)
            (unless (= (llGet "blacklist" (usraddr)) 0) [0x0]1)
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Destruct a user.
        ; ----------------------------------------------------------------------
        ; Calldata: "destructUser"
        ; Returns:  0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "destructUser") {
            [0x0](CALLER) ;Address of the user
            [0x20](llGet "reverseUserList" @0x0)

            ;If the user to be removed is tail
            (when (= @0x0 (singleGet "lastUser")) {

                ;If the user to be removed is head
                (when (= @0x20 "HEAD") {
                    (llRmLink "userList" "HEAD")
                    (singleSet "lastUser" 0)
                })

                ;If the user to be removed is not head
                (unless (= @0x20 "HEAD") {
                    (llRmLink "userList" @0x20)
                    (singleSet "lastUser" @0x20)
                })
                (llRmLink "reverseUserList" @0x0)
            })

            ;If the user to be removed is head
            (when (= @0x20 "HEAD") {
                [0x40](llGet "userList" @0x0)
                (llRmLink "userList" @0x0)
                (llRmLink "reverseUserList" @0x0)
                (llAddLink "userList" "HEAD" @0x40)
                (llAddLink "reverseUserList" @0x40 "HEAD")
            })

            ;If the user to be removed is not head or tail
            (unless (|| (= @0x0 (singleGet "lastUser")) (= @0x20 "HEAD")) {
                [0x40](llGet "userList" @0x0)
                (llRmLink "userList" @0x0)
                (llRmLink "userList" @0x20)
                (llRmLink "reverseUserList" @0x0)
                (llRmLink "reverseUserList" @0x40)
                (llAddLink "userList" @0x20 @0x40)
                (llAddLink "reverseUserList" @0x40 @0x20)
            })

            (llRmLink "userAddressToUserName" @0x0)

            [0x0]1
            (return 0x0 0x20)
        })
    } 0))
}
