; ------------------------------------------------------------------------------
; ElectionManager
; ------------------------------------------------------------------------------
; - create contracts for elections.
; - keep track of all the elections.
; ------------------------------------------------------------------------------

{
    ; init
    (include "./defs/stdll.def")
    (include "./env.def")
    (include "./Election.lll")

    ; --------------------------------------------------------------------------
    ; macros
    ; --------------------------------------------------------------------------
    ; for constants
    ; the address of DOUG, will be substituded in pdx
    (def 'DAPPDOUG 0xabcdef)
    ; the address of AccountManager, will be substituded in pdx
    (def 'ACCOUNT_MANAGER 0xabcdef)
    
    ; for parameters
    (def 'CMD () (CALLDATALOAD 0x0))
    (def 'ELECTION_NAME () (CALLDATALOAD 0x20))
    
    ; --------------------------------------------------------------------------
    ; variables
    ; --------------------------------------------------------------------------
    (llInit "elections" "none" "none" "none")    ; all elections

    (return 0 (lll {
        ; body
        ; ----------------------------------------------------------------------
        ; Create a contract for a new election.
        ; ----------------------------------------------------------------------
        ; Calldata: "createElection" ELECTION_NAME
        ; Returns:
        ;     0 - fail
        ;     0xADDRESS - the address of the newly created contract
        ; ----------------------------------------------------------------------
        (when (= (CMD) "createElection") {
            ; first check if the name has already taken
            (unless (= (llGet "elections" (ELECTION_NAME)) 0) (STOP))
            
            ; then check if the caller is an organizer
            [0x0] "checkOrganizer"
            [0x20] (CALLER)
            (CALL (gass) ACCOUNT_MANAGER 0 0x0 0x40 0x40 0x20)

            (when (= @0x40 0) (STOP))
            
            ; create the contract and save its address in memory 0x0
            [0x0](create 0 0 (lll {
                (election)
            } 0))
            [[@0x0]]1
            
            (llAddLink "elections" (ELECTION_NAME) @0x0)

            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Delete an election (called by the election itself)
        ; ----------------------------------------------------------------------
        ; Calldata: "rmElection" ELECTION_NAME
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (CMD) "rmElection") {
            [0x0] (ElECTION_NAME)
            [0x20] (llGet "elections" (ELECTION_NAME))

            ; if the caller is not the poll itself, then stop
            (unless (= (CALLER) @0x20) (STOP))
            (llRmLink "elections" @0x0)

            [0x0]1
            (return 0x0 0x20)
        })
    })

}