; ------------------------------------------------------------------------------
; ElectionManager
; ------------------------------------------------------------------------------
; Create contracts for elections.
; Keep track of all the elections.
; ------------------------------------------------------------------------------

{
    ; init
    (include "./defs/stdll.def")
    (include "./env.def")
    (include "./Election.lll")

    ; macros
    (def 'cmd () (CALLDATALOAD 0x00))
    (def 'pollname () (CALLDATALOAD 0x20))
    
    ; the address of DOUG, defined in pdx, may need to change it
    ; ??????????????????????????????????????????????????????????????????????????
    (def 'DAPPDOUG 0xdaffe)
    
    (kvInit "types" "none" "none" "none")
    (kvSet "oneoutofn" 1)
    (kvSet "yesorno" 1)

    (kvInit "polls" "none" "none" "none")
    
    (return 0 (lll {
        
        ; ----------------------------------------------------------------------
        ; Create a contract for a new Election.
        ; and record its name (or id?) and address
        ; ----------------------------------------------------------------------
        ; Permission Requirement: "pollmaker"
        ; Calldata: "createOOONPoll" pollName pollType
        ;   pollType: "
        ; Returns: the address of the newly created contract
        ; ----------------------------------------------------------------------
        (when (= (cmd) "createElection") {
            ; first check if the name has already taken
            (unless (= (kvGet "polls" (pollname)) 0) (STOP))
            
            ; then check if the user has the permission to make a poll
            ; 1. get the address of the contract for AccountFactory.lll
            ;    and save it in memory 0x20
            [0x0] "getContractAddr"
            (CALL (gass) DAPPDOUG 0 0x0 0x20 0x20 0x20)
            ; 2. do the checking
            [0x0] "checkPerm"
            [0x20] (CALLER)
            [0x40] "pollmaker"
            (CALL (gass) @0x20 0 0x0 0x60 0x60 0x20)
            ; 3. if the user doesn't have the permission, stop
            (unless (= @0x60 1) (STOP))
            
            ; create the contract and save its address in memory 0x0
            [0x0] (create 0 0 (lll {
                (ooonpoll)
            } 0))

            [[@0x0]] 1    ; ????????????????????????????????????????????????????
            
            ; poll name : poll contract address
            (kvSet "polls" (pollname) @0x0)

            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Create a contract for a new yes-or-no poll
        ; and record its name (or id?) and address
        ; ----------------------------------------------------------------------
        ; Permission Requirement: ""
        ; Calldata: "createYONPoll" pollId
        ; Returns: the address of the newly created contract
        ; ----------------------------------------------------------------------
        (when (= (cmd) "createYONPoll") {
            
            ; create the contract and save its address in memory 0x0
            [0x0] (create 0 0 (lll {
                (yonpoll)
            } 0))

            [[@0x0]] 1
            
            ; poll name : poll contract address
            (kvSet "polls" (pollName) @0x0)

            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Delete the record of a poll contract
        ; ----------------------------------------------------------------------
        ; Permission Requirement: ""
        ; Calldata: "deletePoll" pollName
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "deletePoll") {
            [0x0] (pollName)
            [0x20] (kvGet "polls" @0x0)

            ; if the caller is not the poll itself, then stop
            (unless (= (CALLER) @0x20) (STOP))
            (kvSet "polls" @0x0 0)

            [0x0]1
            (return 0x0 0x20)
        })
    })

}