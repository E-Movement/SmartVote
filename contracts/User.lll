; ------------------------------------------------------------------------------
; User
; ------------------------------------------------------------------------------
; The template for User
; ------------------------------------------------------------------------------
(def 'user () {

    ; init
    (include "./env.def")
    (include "./defs/single.def")
    (include "./defs/stll.def")
    
    ; macros for constants
    ; TODO include DOUG address, to be substituded in pdx???????????????????????
    (def 'DAPPDOUG 0xabcdef)
    (def 'CREATED (TIMESTAMP))
    ; the creator would be the AccountManager
    (def 'CREATOR (CALLER))
    
    ; macros for parameters
    (def 'cmd () (calldataload 0x0))
    ; for setName
    (def 'userName () (calldataload 0x20))
    ; for addElection
    (def 'organizerName (calldataload 0x20))
    (def 'electionAddress (calldataload 0x40))
    ; for vote
    (def 'vote (calldataload 0x60))
    
    (singleInit "username" "none" "none" "none")

    ; ll for all the elections that the user can vote in
    (llInit "elections" "none" "none" "none")

    (return 0 (lll {
        ; body
        ; ----------------------------------------------------------------------
        ; Set username
        ; ----------------------------------------------------------------------
        ; Calldata: "setName" username
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "setName") {
            (unless (= (CALLER) CREATOR) (STOP))
            (singleSet "username" (userName))
            [0x0]1
            (return 0x0 0x20)
        })
        
        ; ----------------------------------------------------------------------
        ; Add an election that the user can vote in
        ; ----------------------------------------------------------------------
        ; Calldata: "addElection" organizerName electionAddress
        ; Returns: 0 - fail | 1 - success
        ; ---------------------------------------------------------------------- 
        (when (= (cmd) "addElection") {
            ; check if the caller is an Organizer
            [0x0]"checkOrganizer"
            [0x20](organizerName)
            (CALL (gass) CREATOR 0 0x0 0x40 0x40 0x20)
            
            (when (= @0x40 0) (STOP))
            
            (llAddLink "elections" (electionAddress) 1)
        })

        ; ----------------------------------------------------------------------
        ; Cast a vote
        ; ----------------------------------------------------------------------
        ; Calldata: "vote" userName electionAddress vote
        ; Returns: 0 - fail | 1 - success
        ; ---------------------------------------------------------------------- 
        (when (= (cmd) "vote") {
            (unless (= (userName) (singleGet "username")) (STOP))
            
            [0x0]"vote"
            [0x20](vote)
            (CALL (gass) (electionAddress) 0 0x0 0x40 0x40 0x20)
            
            ; @0x40 is the result of the voting
            (return 0x40 0x20)
        })
        
        ; To be created
        ; ----------------------------------------------------------------------
        ; Remove an election that the user can vote in
        ; ----------------------------------------------------------------------
        ; Calldata: "rmElection" organizerName electionAddress
        ; Returns: 0 - fail | 1 - success
        ; ---------------------------------------------------------------------- 
    })
})