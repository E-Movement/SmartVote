; ------------------------------------------------------------------------------
; ElectionManager
; ------------------------------------------------------------------------------
; - createElection
; - checkElection
; - removeElection
; ------------------------------------------------------------------------------

{
    ; --------------------------------------------------------------------------
    ; References
    ; --------------------------------------------------------------------------
    (include "./Election.lll")
    (include "./defs/single.def")
    (include "./defs/stdll.def")
    (include "./defs/stdkv.def")
    (include "./env.def")

    ; --------------------------------------------------------------------------
    ; Constants
    ; --------------------------------------------------------------------------
    (def 'DAPPDOUG 0xdaffe)

    ; --------------------------------------------------------------------------
    ; Parameters
    ; --------------------------------------------------------------------------
    (def 'cmd () (calldataload 0x0))

    (def 'elecaddr () (calldataload 0x20)) ;Address of the election

    (def 'crtraddr () (calldataload 0x20)) ;User address of the creator of the election
    (def 'elecname () (calldataload 0x40)) ;Name of the election

    ; --------------------------------------------------------------------------
    ; Variables
    ; --------------------------------------------------------------------------
    (singleInit "lastElection" 0)
    (kvInit "lastModified")
    (llInit "electionNameToElectionAddress")
    (llInit "electionAddressToElectionName")
    (llInit "electionList")
    (llInit "reverseElectionList")

    (return 0 (lll {

        ; ----------------------------------------------------------------------
        ; Create a contract for a new election.
        ; ----------------------------------------------------------------------
        ; Calldata: "createElection" crtrusrname elecname
        ; Returns:
        ;     0 - fail
        ;     0xADDRESS - the address of the newly created contract
        ; ----------------------------------------------------------------------
        (when (= (cmd) "createElection") {
            [0xC0](elecname) ;Restore the name of election in case of conflict
            [0xA0](crtraddr) ;Restore the address of user in case of conflict

            ; first check if the name has already taken
            (unless (= (llGet "electionNameToElectionIndex" (elecname)) 0) (STOP))
            
            ;Get the address of accountManager
            [0x0]"checkName"
            [0x20]"accountManager"
            (CALL (gass) DAPPDOUG 0 0x0 0x40 0x40 0x20)

            ;Then check if the caller has permission to create election
            [0x0]"checkBlacklist"
            [0x20]@0xA0
            (CALL (gass) @0x40 0 0x0 0x40 0x40 0x20)

            (unless (= @0x40 0) (STOP))
            
            ; create the contract and save its address in memory 0x20
            [0x0](create 0 0 (lll {
                (election)
            } 0))

            [[@0x0]]1

            (when (= (singleGet "lastElection") 0) {
                (llAddLink "electionList" "HEAD" @0x0)
                (llAddLink "reverseElectionList" @0x0 "HEAD")
            })
            (unless (= (singleGet "lastElection") 0) {
                (llAddLink (singleGet "electionList" "lastElection") @0x0)
                (llAddLink "reverseElectionList" @0x0 (singleGet "lastElection"))
            })
            (singleSet "lastElection" @0x0)
            (llAddLink "electionNameToElectionAddress" @0xC0 @0x0)
            (llAddLink "electionAddressToElectionName" @0x0 @0xC0)
            
            [0x20]"setPerm"
            [0x40]"electionAccount"
            [0x60]@0x0
            [0x80]1
            (CALL (gass) DAPPDOUG 0 0x20 0x80 0x20 0x20)

            [0x20]"init"
            [0x40]@0xA0
            (CALL (gass) @0x0 0 0x20 0x40 0x20 0x20)

            (kvSet "lastModified" @0x0 (TIMESTAMP))

            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Check an election
        ; ----------------------------------------------------------------------
        ; Calldata: "checkElection"
        ; Returns:
        ;     0 - fail
        ;     0xADDRESS - the address of the contract
        ; ----------------------------------------------------------------------
        (when (= (cmd) "checkElection") {
            [0x0]@@(calldataload 0x20)
            (return 0x0 0x20)
        })

        ; ----------------------------------------------------------------------
        ; Delete an election
        ; ----------------------------------------------------------------------
        ; Calldata: "removeElection"
        ; Returns: 0 - fail | 1 - success
        ; ----------------------------------------------------------------------
        (when (= (cmd) "removeElection") {
            [0x0](CALLER) ;Address of the election
            [0x20](llGet "electionAddressToElectionName" @0x0) ;Get the election name
            (llRmLink "electionNameToElectionAddress" @0x20)
            (llRmLink "electionAddressToElectionName" @0x0)
            [0x20](llGet "reverseElectionList" @0x0)
            (when (= @0x0 (singleGet "lastElection")) {
                (when (= @0x20 "HEAD") {
                    (llRmLink "electionList" "HEAD")
                    (singleSet "lastElection" 0)
                })
                (unless (= @0x20 "HEAD") {
                    (llRmLink "electionList" @0x20)
                    (singleSet "lastElection" @0x20)
                })
                (llRmLink "reverseElectionList" @0x0)
            })
            (when (= @0x20 "HEAD") {
            })
            (kvSet "lastModified" @0x0 0)

            [0x0]1
            (return 0x0 0x20)
        })
    })
}
