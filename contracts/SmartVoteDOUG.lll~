;DAPP DOUG

;FUNCTION CALLS / TRANSACTION SPECIFICATIONS 
;===========================================
;DOUG Name Table Functions

;register
;-------------------------------------------------------------------
;Register a contract to a name
;Permission Requirement: "doug"
;"register" "name" 0xAddress [#type #behaviour #data #model #UI]
;returns - [0 - failure, 1 - success]
;-------------------------------------------------------------------
;name 		- Name by which the contract shall be referenced by
;Address 	- Address of the contract you are registering to name
;-------------------------------------------------------------------


;checkname
;--------------------------------------------------
;Request Address of contract associated with "name"
;Permission Requirement : NONE
;"checkname" "name"
;Returns: 0xAddress associated with name
;--------------------------------------------------
;"name"  - name of contract you want address of
;--------------------------------------------------


;PERMISSION FUNCTIONS

;setperm
;------------------------------------------------------------------------------------------
;Sets permission for a target for given permission to value. Note the permission must exist
;Permission Requirements: "doug"
;"setperm" "name" 0xTarget [#value]
;Returns: [0 - Failure, 1 - Success]
;------------------------------------------------------------------------------------------
;"name"		- name of permission
;0xTarget 	- Address of target whose permission you are setting
;#value 	- Value you are setting target's permission at [0,15], if not included -> 0
;------------------------------------------------------------------------------------------

;addperm
;--------------------------------------------
;Creates a new permission with name "name"
;Permission Requirement: "doug"
;"addperm" "name"
;Returns: [0 - Failure, 1 - Success]
;--------------------------------------------
;"name" - name of permission you are creating
;--------------------------------------------

;checkperm
;-------------------------------------------------------------------
;Returns the value of a permission "name" which the target has
;Permission Requirements: NONE
;"checkperm" "name" 0xTarget
;Returns: Permission value [0,15]
;-------------------------------------------------------------------
;"name"    - Name of permission
;0xTarget  - Address which you want to know the permission value for
;-------------------------------------------------------------------

;VARIABLE FUNCTIONS

;setvar
;------------------------------------------------------
;Set the value of the variable associated with "name"
;Permission Requirements: "doug"
;"setvar" "name" #value
;Returns: [0 - Failure, 1 - Success]
;------------------------------------------------------
;"name"	- Name of variable
;#value - Value you are setting the variable to
;------------------------------------------------------

;getvar
;-------------------------------------
;Get the value associated with "name"
;Permission Requirements: NONE
;"getvar" "name"
;Returns: Value of variable
;-------------------------------------
;"name" - Name of variable
;-------------------------------------
{
	(include "./defs/single.def")
	(include "./defs/stdarray.def")
	(include "./defs/stdll.def")
	(include "./env.def")

	;General structure

	;Minimum Viable Doug Set Up
	(llInit "permnames" "none" "none" "none")
	(llAddLink "permnames" "doug" 1)
	(llAddLink "permnames" "pollfactory" 2)
	(llAddLink "permnames" "polls" 3)
	(llAddLink "permnames" "blacklist" 4)

	(arrayInit "perms" "none" "none" "none" 4) ;Gives Caller all permissions
	(arraySetE "perms" (CALLER) 1 1)
	(arraySetE "perms" (CALLER) 2 1)
	(arraySetE "perms" (CALLER) 3 1)
	(arraySetE "perms" (CALLER) 4 1)

	(def 'BLcheck (addr) (= (arrayGetE "perms" addr 1) 1))

	;(Register)
	(def 'cmd () (calldataload 0x0))
	(def 'name () (calldataload 0x20))
	(def 'target () (calldataload 0x40))

	;DOUG Variable space
	(def 'value () (calldataload 0x40))

	;Permission
	(def 'permnum () (calldataload 0x60))

	(llInit "DOUG" "none" "none" "none")
	(llAddLink "DOUG" "DOUG" (Address))

	[[0x38155ef3698a43b24b054d816a8a5f79fc148623]] 0x1111 ;NEED TO REMOVE THIS

	(return 0 (lll {

	;DOUG Functions
	;=================================================================================

		(when (= (cmd) "checkname")
			{
				[0x0](llGet "DOUG" (name))
				(return 0x0 0x20) ; Return the Address
			}
		)

		(when (= (cmd) "register")
			{
				
				(unless (BLcheck (ORIGIN)) (STOP))

				(llAddLink "DOUG" (name) (target))

				[0x0]1
				(return 0x0 0x20)
			}
		)

	;DOUG Variables
	;=========================================================================================

		(when (= (cmd) "getvar")
			{
				[0x0](singleGet (name))
				(return 0x0 0x20) ; Return the Address
			}
		)

		(when (= (cmd) "setvar")
			{
				(unless (BLcheck (ORIGIN)) (STOP))
				(singleSet (name) (value))
				[0x0]1
				(return 0x0 0x20)
			}
		)	


	;Permissions Functions
	;=========================================================================================

		(when (= (cmd) "checkperm")
			{
				[0x0](arrayGetE "perms" (target) (llGet "permnames" (name)))
				(return 0x0 0x20) ;Return requested value
			}
		)

		(when (= (cmd) "setperm")
			{
				(unless (BLcheck (ORIGIN)) (STOP))
				[0x0](llGet "permnames" (name))
				(when (= @0x0 0) (STOP))
				(arraySetE "perms" (target) @0x0 (permnum))
				[0x0]1
				(return 0x0 0x20)
			}
		)

		(when (= (cmd) "addperm")
			{

				(unless (BLcheck (ORIGIN)) (STOP))
				(llAddLink "permnames" (name) (+ @@(llLenSlot "permnames") 1))

				[0x0]1
				(return 0x0 0x20)
			}
		)

	} 0))
}
